"use strict";var app=angular.module("account",[]).controller("AccountController",["$http","period","$compile","$scope",function(n,t,i,r){function e(n,t,i,r,u,f,e,o,s,h,c,l,a,v,y,p){return{legend:n,height:t,radioTitle:i,radio1:r,radio2:u,name:f,currency:e,frequency:o,weekly:s,biWeekly:h,periodStart:c,monthly:l,annually:a,add:v,itemName:y,currencyName:p}}function f(){return{name:"",type:0,currency:undefined,period:t.setPeriod(0,0,1,31,0,11,new Date)}}var u=this;u.fname="";u.lname="";u.email="";u.cEmail="";u.pword="";u.cPword="";u.addItem=function(n){var t=i("<prompt>")(r.$parent);angular.element(document.getElementById("ctrl")).append(t);n.push(new f)};u.removeItem=function(n,t,i){var r=[];if(t.length===1){alert("You need at least one "+i+".");return}angular.copy(t,r);r.splice(n,1);angular.copy(r,t)};u.employers=[new f];u.employerText=new e("Employer",500,"Income Type:","Fixed Income","Variable Income","Employer Name","Net Pay","Pay Period Frequency:","This employer pays me every week on:","This employer pays me every other week on:","Enter a date when you've received payment from this employer or a date when you expect to be paid:","This employer pays me every month on the:","This employer pays me every year on:","Click to add an employer","employer","netPay");u.envelopes=[new f];u.envelopeText=new e("Envelope",671,"Envelope Type:","Dynamic","Static","Envelope Name","Amount","Withdraw Frequency:","This envelope gets withdrawn every week on:","This envelope gets withdrawn every other week on:","Enter a date when this envelope has been withdrawn:","This envelope gets withdrawn every month on the:","This envelope gets withdrawn every year on:","Click to add an envelope","envelope","amount");u.frequency=t.frequency;u.daysOfWeek=t.daysOfWeek;u.daysOfMonth=t.daysOfMonth;u.months=t.months;u.screenIndex=0;u.setScreen=function(n){u.screenIndex=n};u.submit=function(t){if(!t.$valid){angular.forEach(t.$$controls,function(n){n.$validators.required&&n.$setTouched()});alert("Please correct any errors on this form.");return}var i={params:{user:{firstName:u.fname,lastName:u.lname,email:u.email,password:u.pword},employers:u.employers,envelopes:u.envelopes}};n.get("Account.asmx/CreateAccount",i).then(function(){},function(n){alert(n.statusText)})}}]).directive("itemSets",function(){return{restrict:"E",controller:"AccountController",controllerAs:"ctrl",scope:{items:"=",itemText:"=",form:"="},templateUrl:"item-set.html"}}).directive("confirm",function(){return{require:"ngModel",scope:{confirm:"="},link:function(n,t,i,r){r.$validators.confirm=function(t){return t===n.confirm};n.$watch("confirm",function(){r.$validate()})}}}).directive("password",function(){return{require:"ngModel",link:function(n,t,i,r){r.$validators.password=function(n){return n===""||n===undefined?!0:/^((?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,16})$/.test(n)?!0:!1}}}}).directive("setName",function(){return{scope:{setName:"@",nameIndex:"@",numItems:"@"},link:function(n,t,i){n.$watch("numItems",function(){i.$set("name",n.setName+n.nameIndex)})}}}).directive("prompt",function(){return{restrict:"E",template:'<button ng-click="ctrl.setScreen(1)">Click me!<\/button>'}});